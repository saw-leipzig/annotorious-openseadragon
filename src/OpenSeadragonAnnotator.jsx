import React, { Component } from 'react';
import { Editor } from '@recogito/recogito-client-core';
import OSDAnnotationLayer from './annotations/OSDAnnotationLayer';

export default class OpenSeadragonAnnotator extends Component {

  state = {
    selectedAnnotation: null,
    selectedDOMElement: null
  }

  /** Shorthand **/
  clearState = () => this.setState({
    selectedAnnotation: null,
    selectedDOMElement: null
  });

  componentDidMount() {
    this.annotationLayer = new OSDAnnotationLayer(this.props);
    this.annotationLayer.on('mouseEnterAnnotation', this.props.onMouseEnterAnnotation);
    this.annotationLayer.on('mouseLeaveAnnotation', this.props.onMouseLeaveAnnotation);
    this.annotationLayer.on('select', this.handleSelect);
    this.annotationLayer.on('moveSelection', this.handleMoveSelection);
  }

  componentWillUnmount() {
    this.annotationLayer.destroy();
  }

  handleSelect = evt => {
    const { annotation, element, skipEvent } = evt;
    if (annotation) {
      this.setState({
        selectedAnnotation: annotation,
        selectedDOMElement: element
      });

      if (!annotation.isSelection && !skipEvent)
        this.props.onAnnotationSelected(annotation.clone());
    } else {
      this.clearState();
    }
  }

  handleMoveSelection = selectedDOMElement =>
    this.setState({ selectedDOMElement });

  /**
   * A convenience method that allows the external application to
   * override the autogenerated Id for an annotation.
   */
  overrideAnnotationId = originalAnnotation => forcedId => {
    const { id } = originalAnnotation;

    // Force the editor to close first, otherwise there's a risk of orphaned annotation
    if (this.state.selectedAnnotation) {
      this.setState({
        selectedAnnotation: null,
        selectedDOMElement: null
      }, () => {
        this.annotationLayer.overrideId(id, forcedId);
      });
    } else {
      this.annotationLayer.overrideId(id, forcedId);
    }
  }

  /**************************/
  /* Annotation CRUD events */
  /**************************/

  onCreateOrUpdateAnnotation = method => (annotation, previous) => {
    this.clearState();
    this.annotationLayer.deselect();
    this.annotationLayer.addOrUpdateAnnotation(annotation, previous);

    // Call CREATE or UPDATE handler
    if (previous)
      this.props[method](annotation, previous.clone());
    else
      this.props[method](annotation, this.overrideAnnotationId(annotation));
  }

  onDeleteAnnotation = annotation => {
    this.clearState();
    this.annotationLayer.removeAnnotation(annotation);
    this.props.onAnnotationDeleted(annotation);
  }

  onCancelAnnotation = annotation => {
    this.clearState();
    this.annotationLayer.deselect();

    if (annotation.isSelection)
      this.props.onSelectionCanceled(annotation);
  }

  /****************/
  /* External API */
  /****************/

  addAnnotation = annotation =>
    this.annotationLayer.addOrUpdateAnnotation(annotation.clone());

  fitBounds = (annotationOrId, immediately) =>
    this.annotationLayer.fitBounds(annotationOrId, immediately);

  getAnnotations = () =>
    this.annotationLayer.getAnnotations().map(a => a.clone());

  panTo = (annotationOrId, immediately) =>
    this.annotationLayer.panTo(annotationOrId, immediately);

  removeAnnotation = annotation =>
    this.annotationLayer.removeAnnotation(annotation.clone());

  highlight = arg => {
      const annotation = this.annotationLayer.highlight(arg);
    }

  dehighlight = arg => {
      const annotation = this.annotationLayer.dehighlight(arg);
    }

  selectAnnotation = arg => {
    const annotation = this.annotationLayer.selectAnnotation(arg);

    if (annotation)
      return annotation.clone();
    else
      this.clearState(); // Deselect
  }

  setAnnotations = annotations =>
    this.annotationLayer.init(annotations.map(a => a.clone()));

  setDrawingEnabled = enable =>
    this.annotationLayer.setDrawingEnabled(enable);

  setDrawingTool = shape =>
    this.annotationLayer.setDrawingTool(shape);

  render() {
    return (
      this.state.selectedAnnotation && (
        <Editor
          wrapperEl={this.props.wrapperEl}
          annotation={this.state.selectedAnnotation}
          selectedElement={this.state.selectedDOMElement}
          readOnly={this.props.config.readOnly}
          config={this.props.config}
          env={this.props.env}
          onAnnotationCreated={this.onCreateOrUpdateAnnotation('onAnnotationCreated')}
          onAnnotationUpdated={this.onCreateOrUpdateAnnotation('onAnnotationUpdated')}
          onAnnotationDeleted={this.onDeleteAnnotation}
<<<<<<< HEAD
          onCancel={this.onCancelAnnotation}>

          <Editor.TreeWidget tree={this.props.tree}  image={this.props.image} />

        </Editor>
=======
          onCancel={this.onCancelAnnotation} />
>>>>>>> 1697f5fe9f9a3b14e2c0bfcd228040fe86ad38be
      )
    )
  }

}
